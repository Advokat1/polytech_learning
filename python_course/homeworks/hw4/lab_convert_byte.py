"""
? Задание: Сделать простую игру "конвертор битовых чисел"

Создать мини-игру, которая будет иметь два режима:
1) ответ в виде десятичного числа
2) ответ в виде шеснадцатеричным числом

А также в игре будет несколько уровней сложности:
- детский:	числа от 0000 0000 до 0000 0111;
- легкий:	числа от 0000 0000 до 0000 1111;
- средний:	числа от 0000 0000 до 0011 1111;
- сложный:	числа от 0000 0000 до 1111 1111.

В начале игры выбрать: уровень сложности, количество вопросов (например, 10).

Числа генерируются случайным образом.
Пример:
    0000 1111 = ? dec (Ответ: 15)
    0000 1111 = ? hex (Ответ: 0F)
В конце игры показать статистику игры, например, количество правильных и неправильных ответов, общее время и др., а также предложить повторить игру.
"""
import random
import datetime as dt

lvls_range = {
    '1': 7,
    '2': 15,
    '3': 63,
    '4': 255 
}


def game():
    difficulty = int(input("""Укажите уровень сложности из представленных:\n 1 - детский 
                        \n 2 - легкий 
                        \n 3 - средний 
                        \n 4 - сложный """))
                    
    n = int(input('Введите кол-во вопросов '))

    correct = 0
    wrong = 0

    print(f"Сейчас вам будет задано несколько чисел в двоичном представлении, необходимо ответить что это за число в виде десятичного или шеснадцатеричного представления")
    
    time_start = dt.datetime.now()

    for i in range(n):
        question = random.randint(0, lvls_range[f'{difficulty}'])

        answer = input(f'{question:b} -- что это за число?  ')

        if answer == f'{question}' or answer == f'{question:x}':
            correct += 1
        else:
            wrong += 1
    
    time_finish = dt.datetime.now()
    delta = time_finish - time_start
    
    print(f'Правильных ответов: {correct}. Неправильных ответов: {wrong}. Времени потрачено: {delta.seconds} (sec)')
    
    game_again = input('Напишите Y для продолжения игры/N для того что бы закончить  ')
    
    if game_again.lower() == 'y':
        return True
    else:
        return False

go_next = True

while go_next == True:    
    go_next = game()